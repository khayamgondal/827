 malloy@vegeta:~/pubsvn/MALLOY_827-2014/examples/bison/parens/debug$ r
Starting parse
Entering state 0
Reducing stack by rule 2 (line 11):
-> $$ = nterm lines ()
Stack now 0
Entering state 1
Reading a token: --(end of buffer or a NUL)
(()())
--accepting rule at line 9 ("(")
Next token is token '(' ()
Shifting token '(' ()
Entering state 3
Reading a token: --accepting rule at line 9 ("(")
Next token is token '(' ()
Shifting token '(' ()
Entering state 3
Reading a token: --accepting rule at line 10 (")")
Next token is token ')' ()
Shifting token ')' ()
Entering state 5
Reducing stack by rule 5 (line 16):
   $1 = token '(' ()
   $2 = token ')' ()
-> $$ = nterm expr ()
Stack now 0 1 3
Entering state 6
Reading a token: --accepting rule at line 9 ("(")
Next token is token '(' ()
Shifting token '(' ()
Entering state 3
Reading a token: --accepting rule at line 10 (")")
Next token is token ')' ()
Shifting token ')' ()
Entering state 5
Reducing stack by rule 5 (line 16):
   $1 = token '(' ()
   $2 = token ')' ()
-> $$ = nterm expr ()
Stack now 0 1 3 6
Entering state 8
Reading a token: --accepting rule at line 10 (")")
Next token is token ')' ()
Reducing stack by rule 3 (line 14):
   $1 = nterm expr ()
   $2 = nterm expr ()
-> $$ = nterm expr ()
Stack now 0 1 3
Entering state 6
Next token is token ')' ()
Shifting token ')' ()
Entering state 9
Reducing stack by rule 4 (line 15):
   $1 = token '(' ()
   $2 = nterm expr ()
   $3 = token ')' ()
-> $$ = nterm expr ()
Stack now 0 1
Entering state 4
Reading a token: --accepting rule at line 11 ("
")
Next token is token CR ()
Shifting token CR ()
Entering state 7
Reducing stack by rule 1 (line 9):
   $1 = nterm lines ()
   $2 = nterm expr ()
   $3 = token CR ()
accept
-> $$ = nterm lines ()
Stack now 0
Entering state 1
Reading a token: --(end of buffer or a NUL)
--EOF (start condition 0)
Now at end of input.
Shifting token $end ()
Entering state 2
Stack now 0 1 2
Cleanup: popping token $end ()
Cleanup: popping nterm lines ()
Done.
